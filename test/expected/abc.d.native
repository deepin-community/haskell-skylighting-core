[ [ ( PreprocessorTok , "import" )
  , ( ImportTok
    , " std.stdio, std.ascii, std.algorithm, std.array, std.range"
    )
  , ( OperatorTok , ";" )
  ]
, []
, [ ( WarningTok , "alias" )
  , ( NormalTok , " Block " )
  , ( OperatorTok , "=" )
  , ( NormalTok , " " )
  , ( DataTypeTok , "char" )
  , ( OperatorTok , "[" )
  , ( DecValTok , "2" )
  , ( OperatorTok , "];" )
  ]
, []
, [ ( DataTypeTok , "bool" )
  , ( NormalTok , " canMakeWord" )
  , ( OperatorTok , "(" )
  , ( FunctionTok , "immutable" )
  , ( NormalTok , " Block" )
  , ( OperatorTok , "[]" )
  , ( NormalTok , " blocks" )
  , ( OperatorTok , "," )
  , ( NormalTok , " " )
  , ( AttributeTok , "in" )
  , ( NormalTok , " " )
  , ( BuiltInTok , "string" )
  , ( NormalTok , " word" )
  , ( OperatorTok , ")" )
  , ( NormalTok , " " )
  , ( FunctionTok , "pure" )
  , ( NormalTok , " " )
  , ( FunctionTok , "nothrow" )
  ]
, [ ( KeywordTok , "in " ) , ( OperatorTok , "{" ) ]
, [ ( NormalTok , "    " )
  , ( AttributeTok , "assert" )
  , ( OperatorTok , "(" )
  , ( NormalTok , "blocks.all" )
  , ( OperatorTok , "!(" )
  , ( NormalTok , "w " )
  , ( OperatorTok , "=>" )
  , ( NormalTok , " w" )
  , ( OperatorTok , "[]" )
  , ( NormalTok , ".all" )
  , ( OperatorTok , "!" )
  , ( NormalTok , "isAlpha" )
  , ( OperatorTok , "));" )
  ]
, [ ( NormalTok , "    " )
  , ( AttributeTok , "assert" )
  , ( OperatorTok , "(" )
  , ( NormalTok , "word.all" )
  , ( OperatorTok , "!" )
  , ( NormalTok , "isAlpha" )
  , ( OperatorTok , ");" )
  ]
, [ ( OperatorTok , "}" )
  , ( NormalTok , " " )
  , ( KeywordTok , "body" )
  , ( NormalTok , " " )
  , ( OperatorTok , "{" )
  ]
, [ ( NormalTok , "    " )
  , ( DataTypeTok , "bool" )
  , ( NormalTok , " inner" )
  , ( OperatorTok , "(" )
  , ( BuiltInTok , "size_t" )
  , ( OperatorTok , "[]" )
  , ( NormalTok , " indexes" )
  , ( OperatorTok , "," )
  , ( NormalTok , " " )
  , ( AttributeTok , "in" )
  , ( NormalTok , " " )
  , ( BuiltInTok , "string" )
  , ( NormalTok , " w" )
  , ( OperatorTok , ")" )
  , ( NormalTok , " " )
  , ( FunctionTok , "pure" )
  , ( NormalTok , " " )
  , ( FunctionTok , "nothrow" )
  , ( NormalTok , " " )
  , ( OperatorTok , "{" )
  ]
, [ ( NormalTok , "        " )
  , ( KeywordTok , "if" )
  , ( NormalTok , " " )
  , ( OperatorTok , "(" )
  , ( NormalTok , "w.empty" )
  , ( OperatorTok , ")" )
  ]
, [ ( NormalTok , "            " )
  , ( KeywordTok , "return" )
  , ( NormalTok , " " )
  , ( AttributeTok , "true" )
  , ( OperatorTok , ";" )
  ]
, []
, [ ( NormalTok , "        " )
  , ( FunctionTok , "immutable" )
  , ( NormalTok , " c " )
  , ( OperatorTok , "=" )
  , ( NormalTok , " w" )
  , ( OperatorTok , "[" )
  , ( DecValTok , "0" )
  , ( OperatorTok , "]" )
  , ( NormalTok , ".toUpper" )
  , ( OperatorTok , ";" )
  ]
, [ ( NormalTok , "        " )
  , ( KeywordTok , "foreach" )
  , ( NormalTok , " " )
  , ( OperatorTok , "(" )
  , ( FunctionTok , "ref" )
  , ( NormalTok , " idx" )
  , ( OperatorTok , ";" )
  , ( NormalTok , " indexes" )
  , ( OperatorTok , ")" )
  , ( NormalTok , " " )
  , ( OperatorTok , "{" )
  ]
, [ ( NormalTok , "            " )
  , ( KeywordTok , "if" )
  , ( NormalTok , " " )
  , ( OperatorTok , "(" )
  , ( NormalTok , "blocks" )
  , ( OperatorTok , "[" )
  , ( NormalTok , "idx" )
  , ( OperatorTok , "][" )
  , ( DecValTok , "0" )
  , ( OperatorTok , "]" )
  , ( NormalTok , ".toUpper " )
  , ( OperatorTok , "!=" )
  , ( NormalTok , " c " )
  , ( OperatorTok , "&&" )
  ]
, [ ( NormalTok , "                blocks" )
  , ( OperatorTok , "[" )
  , ( NormalTok , "idx" )
  , ( OperatorTok , "][" )
  , ( DecValTok , "1" )
  , ( OperatorTok , "]" )
  , ( NormalTok , ".toUpper " )
  , ( OperatorTok , "!=" )
  , ( NormalTok , " c" )
  , ( OperatorTok , ")" )
  ]
, [ ( NormalTok , "                " )
  , ( KeywordTok , "continue" )
  , ( OperatorTok , ";" )
  ]
, [ ( NormalTok , "            indexes" )
  , ( OperatorTok , "[" )
  , ( DecValTok , "0" )
  , ( OperatorTok , "]" )
  , ( NormalTok , ".swap" )
  , ( OperatorTok , "(" )
  , ( NormalTok , "idx" )
  , ( OperatorTok , ");" )
  ]
, [ ( NormalTok , "            " )
  , ( KeywordTok , "if" )
  , ( NormalTok , " " )
  , ( OperatorTok , "(" )
  , ( NormalTok , "inner" )
  , ( OperatorTok , "(" )
  , ( NormalTok , "indexes" )
  , ( OperatorTok , "[" )
  , ( DecValTok , "1" )
  , ( NormalTok , " .. $" )
  , ( OperatorTok , "]," )
  , ( NormalTok , " w" )
  , ( OperatorTok , "[" )
  , ( DecValTok , "1" )
  , ( NormalTok , " .. $" )
  , ( OperatorTok , "]))" )
  ]
, [ ( NormalTok , "                " )
  , ( KeywordTok , "return" )
  , ( NormalTok , " " )
  , ( AttributeTok , "true" )
  , ( OperatorTok , ";" )
  ]
, [ ( NormalTok , "            indexes" )
  , ( OperatorTok , "[" )
  , ( DecValTok , "0" )
  , ( OperatorTok , "]" )
  , ( NormalTok , ".swap" )
  , ( OperatorTok , "(" )
  , ( NormalTok , "idx" )
  , ( OperatorTok , ");" )
  ]
, [ ( NormalTok , "        " ) , ( OperatorTok , "}" ) ]
, []
, [ ( NormalTok , "        " )
  , ( KeywordTok , "return" )
  , ( NormalTok , " " )
  , ( AttributeTok , "false" )
  , ( OperatorTok , ";" )
  ]
, [ ( NormalTok , "    " ) , ( OperatorTok , "}" ) ]
, []
, [ ( NormalTok , "    " )
  , ( KeywordTok , "return" )
  , ( NormalTok , " inner" )
  , ( OperatorTok , "(" )
  , ( NormalTok , "blocks." )
  , ( DataTypeTok , "length" )
  , ( NormalTok , ".iota.array" )
  , ( OperatorTok , "," )
  , ( NormalTok , " word" )
  , ( OperatorTok , ");" )
  ]
, [ ( OperatorTok , "}" ) ]
, []
, [ ( DataTypeTok , "void" )
  , ( NormalTok , " main" )
  , ( OperatorTok , "()" )
  , ( NormalTok , " " )
  , ( OperatorTok , "{" )
  ]
, [ ( NormalTok , "    " )
  , ( WarningTok , "enum" )
  , ( NormalTok , " Block" )
  , ( OperatorTok , "[]" )
  , ( NormalTok , " blocks " )
  , ( OperatorTok , "=" )
  , ( NormalTok , " " )
  , ( StringTok , "\"BO XK DQ CP NA GT RE TG QD FS" )
  ]
, [ ( StringTok
    , "                           JW HU VI AN OB ER FS LY PC ZM\""
    )
  , ( NormalTok , ".split" )
  , ( OperatorTok , ";" )
  ]
, []
, [ ( NormalTok , "    " )
  , ( KeywordTok , "foreach" )
  , ( NormalTok , " " )
  , ( OperatorTok , "(" )
  , ( NormalTok , "w" )
  , ( OperatorTok , ";" )
  , ( NormalTok , " " )
  , ( StringTok , "\"\"" )
  , ( NormalTok , " " )
  , ( OperatorTok , "~" )
  , ( NormalTok , " " )
  , ( StringTok , "\"A BARK BoOK TrEAT COmMoN SQUAD conFUsE\"" )
  , ( NormalTok , ".split" )
  , ( OperatorTok , ")" )
  ]
, [ ( NormalTok , "        writefln" )
  , ( OperatorTok , "(" )
  , ( SpecialStringTok , "`\"%s\" %s`" )
  , ( OperatorTok , "," )
  , ( NormalTok , " w" )
  , ( OperatorTok , "," )
  , ( NormalTok , " blocks.canMakeWord" )
  , ( OperatorTok , "(" )
  , ( NormalTok , "w" )
  , ( OperatorTok , "));" )
  ]
, []
, [ ( NormalTok , "    " ) , ( CommentTok , "// Extra test." ) ]
, [ ( NormalTok , "    " )
  , ( FunctionTok , "immutable" )
  , ( NormalTok , " Block" )
  , ( OperatorTok , "[]" )
  , ( NormalTok , " blocks2 " )
  , ( OperatorTok , "=" )
  , ( NormalTok , " " )
  , ( OperatorTok , "[" )
  , ( StringTok , "\"AB\"" )
  , ( OperatorTok , "," )
  , ( NormalTok , " " )
  , ( StringTok , "\"AB\"" )
  , ( OperatorTok , "," )
  , ( NormalTok , " " )
  , ( StringTok , "\"AC\"" )
  , ( OperatorTok , "," )
  , ( NormalTok , " " )
  , ( StringTok , "\"AC\"" )
  , ( OperatorTok , "];" )
  ]
, [ ( NormalTok , "    " )
  , ( FunctionTok , "immutable" )
  , ( NormalTok , " word " )
  , ( OperatorTok , "=" )
  , ( NormalTok , " " )
  , ( StringTok , "\"abba\"" )
  , ( OperatorTok , ";" )
  ]
, [ ( NormalTok , "    writefln" )
  , ( OperatorTok , "(" )
  , ( SpecialStringTok , "`\"%s\" %s`" )
  , ( OperatorTok , "," )
  , ( NormalTok , " word" )
  , ( OperatorTok , "," )
  , ( NormalTok , " blocks2.canMakeWord" )
  , ( OperatorTok , "(" )
  , ( NormalTok , "word" )
  , ( OperatorTok , "));" )
  ]
, [ ( OperatorTok , "}" ) ]
]
